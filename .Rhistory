print ("Hello")
print('hi')
mean(mtcars$mpg)
library(assertthat)
detach("package:assertthat", unload = TRUE)
installed.packages()
help(package = "ggplot2")
help(package = "cli")
install.packages("ggplot2")
library(ggplot2)
update.packages()
library()
library(colorspace)
sessionInfo()
install.packages("KernSmooth")
library("KarnSmooth")
str(summaryRprof)
by.total
$by.total
sample.interval
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
test(x + 0.05, y + 0.05, labels = as.character(1:12))
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust(hClustering, lab = rep(1:3), each = 4), lab.col = rep(1:3, each=4)
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed
set.seed(678910)
set.seed(678910)
for(i in 1:40){
coinFlip <- rbinom(1, size = 1, prob = 0.5)
if(coinFlip){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for(i in 1:40){
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
if(coinFlip1){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), each = 5)
}
if (coinFlip2){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
set.seed(678910)
for(i in 1:40){
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
if(coinFlip1){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), each = 5)
}
if (coinFlip2){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$v[, 1], pch = 19, xlab = "COlumn", ylab = "First right singular vector")
plot(svd2$v[, 1], pch = 19, xlab = "COlumn", ylab = "Second right singular vector")
install.packages("Cacheing")
loadcache()
install.packages("cacheing")
library(cache)
install.packages(c("backports", "data.table", "dplyr", "DT", "fs", "Hmisc", "httr", "pillar", "pkgbuild", "processx", "Rcpp", "sys", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "Hmisc", "Rcpp", "sys", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "Hmisc"))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
dt <- data.frame(cbind(x, y))
g <- ggplot(dt, aes(x = x, y = y))
g <- g + geom_point(size = 7, colour = "black", alpha = 0.5)
g + geom_smooth(method = "lm", colour = "red")
g <- ggplot2(dt, aes(x = x, y = y))
g <- ggplot(dt, aes(x = x, y = y))
library(ggplot2)
g <- ggplot(dt, aes(x = x, y = y))
g <- g + geom_point(size = 7, colour = "black", alpha = 0.5)
g + geom_smooth(method = "lm", colour = "red")
fit <- lm(y - x)
(coeffit1 <- summary(fit)$coef)
fit <- lm(y-x)
fit <- lm(y~x)
(coeffit1 <- summary(fit)$coef)
coeffit1[2, 4]
round(summary(fit)$sigma, 3)
g <- ggplot(mmtcars, aes(x = wt, y = mpg))
g <- g + geom_point(size = 7, colour = "black", alpha = 0.5)
g + geom_smooth(method = "lm", colour = "red")
g <- ggplot(mtcars, aes(x = wt, y = mpg))
g <- ggplot(mtcars, aes(x = wt, y = mpg))
g <- g + geom_point(size = 7, colour = "black", alpha = 0.5)
g + geom_smooth(method = "lm", colour = "red")
require(datasets)
data("mtcars")
fit3 <- lm(mpg ~ I(wt-mean(wt)), mtcars)
(sumCoef <- summary(fit3)$coef)
sumCoef[1, 1] + c(-1, 1)*qt(.975, df = fit3$de.residual)*sumCoef[1, 2]
p1 <- predict(fit5, newdata = data.frame(wt = 3), interval = ("confidence"))
require(datasets)
data(swiss)
?swiss
require(GGally)
require(GGally);
install.packages("GGally")
require(GGally)
g=ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
g
g=ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
g
setwd("C:/Users/91739/Downloads/RProg_Practice/Coursera/regression_models")
install.packages("kableExtra")
